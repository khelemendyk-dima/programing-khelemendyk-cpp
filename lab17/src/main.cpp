/**
 * @mainpage
 * # Загальне завдання
 * Для предметної галузі з розділу “Розрахункове завдання / 
 * Iндивідуальні завдання” розробити два класи:
 * • клас, що відображає сутність “базового класу”, у тому числі:
 * – конструктор за замовчуванням, копіювання та конструктор 
 * з аргументами (реалізація конструкторів повинна бути 
 * продемонстрована за допомогою списків ініціалізацій);
 * – деструктор;
 * – гетери та сетери на поля класу;
 * – метод виводу об’єкта на екран.
 * • клас, що має у собі динамічний масив об’єктів базового класу 
 * та має в собі методи додавання, видалення елемента, отримання 
 * елемента по індексу (або ідентифікатору), вивід усіх елементів 
 * на екран, метод 1 обходу колекції.
 *
 * @author Khelemendyk D.
 * @date 09-may-2022
 * @version 0.1
 */

/**
 * @file main.cpp
 * @brief Файл з демонстрацією роботи функцій
 * та методів оперування ними.
 *
 * @author Khelemendyk D.
 * @date 09-may-2022
 * @version 0.1
 */

#include "list.h"

/**
 * Головна функція.
 *
 * Послідовність дій:
 * - створюю 3 лампочки, використовуючи 3 реалізованних конструкторів, 
 * та створюю список;
 * - далі додаю лампочки в список 4 рази у різні позиції шляхом виклику 
 * функції {@link addBulb} та друкую їх функцією {@link print};
 * - потім видаляю лампочку за індексом 2 за допомогою функції 
 * {@link removeBulb} та показую результат функцією {@link print};
 * - також знаходю згорівші лампочки за допомогою функції {@link findBurnedBulb};
 * - нарешті створюю лампочку та заповнюю її даними елемента списку за індексом 1 
 * функцією {@link getBulb} та друкую її за допомогою функції {@link print};
 * - @return успішний код повернення з програми (0).
 */

int main()
{
	Bulb bulb1;
	Bulb bulb2("no", "yes", "Romashka", 21, 15, 2400, "Triangle", "E21");
	Bulb bulb3(bulb1);
	List list;
	cout << "Adding bulbs and print them" << endl;
	list.addBulb(bulb1);
	list.addBulb(bulb2);
	list.addBulb(bulb2, 2);
	list.addBulb(bulb3, 3);
	list.print();
	cout << "Removing bulb" << endl;
	list.removeBulb(2);
	list.print();
	list.findBurnedBulbs();
	cout << "\nGetting bulb number 2 and print it" << endl;
	Bulb bulb4 = list.getBulb(1);
	bulb4.print();
	return 0;
}